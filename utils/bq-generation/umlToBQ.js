import axios from 'axios';
import { CONSTANTS } from '../../constants/bq-generation/constants.js';
import sqlToBQ from '../../helpers/bq-generation/sqlToBq.js';

export default async function umlToBQ(
	umlText = '',
	schemaIds = [
		{
			schemaId: '67078fb7f6719a0a4db18b4b',
			name: 'capacity_planning',
		},
	]
) {
	try {
		// step 1: send uml to file id
		const umlToFildIdUrl = `${CONSTANTS.BaseUrl}/${CONSTANTS.EndPointAgentFileId}`;
		const requestBodyUmlToFildId = {
			user_id: 'Gaian@123',
			assistant_id: CONSTANTS.AssistantIdUmlToQueries,
			thread_id: '',
			file_id: '',
			input: `${umlText}.Give the output queries in a file. give me the atleast 20 queries`,
			model: '',
		};
		let umlFildId;

		// retry until a fild id is received
		while (!umlFildId) {
			let umlToFileIdRes = await axios.post(
				umlToFildIdUrl,
				requestBodyUmlToFildId,
				{
					headers: {
						'Content-Type': 'application/json',
					},
				}
			);
			umlFildId = umlToFileIdRes.data?.messages[0]?.file_id;
		}
		console.log('Step 1: Uml sent to agent and file id received');

		// step 2: send fild id to get possible queries
		const umlFileIdToQueriesUrl = `${CONSTANTS.BaseUrl}/${CONSTANTS.EndPointAgentResponse}?file_id=${umlFildId}`;
		let umlFileIdToQueriesResponse = await axios.get(umlFileIdToQueriesUrl);
		let possibleQueriesJson = umlFileIdToQueriesResponse.data;
		console.log('Step 2: Possible SQL queries from UML generated');

		// step 3: send possible queries to agent for conversion to bq
		const queryToBqAgentUrl = umlToFildIdUrl; // since they will use same urls
		const requestBodyForBqDefinitions = {
			user_id: 'Gaian@123',
			assistant_id: CONSTANTS.AssistantIdSqlToBq,
			thread_id: '',
			file_id: '',
			input:
				JSON.stringify(schemaIds) +
				JSON.stringify(possibleQueriesJson) +
				'Give response only in json, no helper text is needed since your output will be directly used in javascript code. Avoid comments in queries at all costs. and finally, send array of bqs in stringified json so that I can get all the queries by just doing JSON.parse() in javascript/react.',
			model: '',
		};

		// sql to bq agent api call
		let possibleQueriesToBqResponse = await axios.post(
			queryToBqAgentUrl,
			requestBodyForBqDefinitions
		);

		let bqDefinitions = JSON.parse(
			possibleQueriesToBqResponse.data?.messages[0]?.content
		);

		console.log('Step 3: File id generated by Sql to BQ agent');
		return {
			bqs: bqDefinitions[Object.keys(bqDefinitions)[0]],
		};
	} catch (error) {
		console.log('bq generation error: ', error.response);
		// console.log(error);
	}
}
